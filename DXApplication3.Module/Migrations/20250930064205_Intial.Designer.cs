// <auto-generated />
using System;
using DXApplication3.Module.BusinessObjects;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DXApplication3.Module.Migrations
{
    [DbContext(typeof(DXApplication3EFCoreDbContext))]
    [Migration("20250930064205_Intial")]
    partial class Intial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.DashboardData", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<bool>("SynchronizeTitle")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("DashboardData");
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.FileData", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte[]>("Content")
                        .HasColumnType("bytea");

                    b.Property<string>("FileName")
                        .HasColumnType("text");

                    b.Property<int>("Size")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.ToTable("FileData");
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.ModelDifference", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ContextId")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.ToTable("ModelDifferences");
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.ModelDifferenceAspect", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("OwnerID")
                        .HasColumnType("uuid");

                    b.Property<string>("Xml")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("OwnerID");

                    b.ToTable("ModelDifferenceAspects");
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.PermissionPolicy.PermissionPolicyActionPermissionObject", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ActionId")
                        .HasColumnType("text");

                    b.Property<Guid?>("RoleID")
                        .HasColumnType("uuid");

                    b.HasKey("ID");

                    b.HasIndex("RoleID");

                    b.ToTable("PermissionPolicyActionPermissionObject");
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.PermissionPolicy.PermissionPolicyMemberPermissionsObject", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Criteria")
                        .HasColumnType("text");

                    b.Property<string>("Members")
                        .HasColumnType("text");

                    b.Property<int?>("ReadState")
                        .HasColumnType("integer");

                    b.Property<Guid?>("TypePermissionObjectID")
                        .HasColumnType("uuid");

                    b.Property<int?>("WriteState")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("TypePermissionObjectID");

                    b.ToTable("PermissionPolicyMemberPermissionsObject");
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.PermissionPolicy.PermissionPolicyNavigationPermissionObject", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ItemPath")
                        .HasColumnType("text");

                    b.Property<int?>("NavigateState")
                        .HasColumnType("integer");

                    b.Property<Guid?>("RoleID")
                        .HasColumnType("uuid");

                    b.Property<string>("TargetTypeFullName")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("RoleID");

                    b.ToTable("PermissionPolicyNavigationPermissionObject");
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.PermissionPolicy.PermissionPolicyObjectPermissionsObject", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Criteria")
                        .HasColumnType("text");

                    b.Property<int?>("DeleteState")
                        .HasColumnType("integer");

                    b.Property<int?>("NavigateState")
                        .HasColumnType("integer");

                    b.Property<int?>("ReadState")
                        .HasColumnType("integer");

                    b.Property<Guid?>("TypePermissionObjectID")
                        .HasColumnType("uuid");

                    b.Property<int?>("WriteState")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("TypePermissionObjectID");

                    b.ToTable("PermissionPolicyObjectPermissionsObject");
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.PermissionPolicy.PermissionPolicyRoleBase", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("CanEditModel")
                        .HasColumnType("boolean");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsAdministrative")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAllowPermissionPriority")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("PermissionPolicy")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.ToTable("PermissionPolicyRoleBase");

                    b.HasDiscriminator<string>("Discriminator").HasValue("PermissionPolicyRoleBase");
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.PermissionPolicy.PermissionPolicyTypePermissionObject", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("CreateState")
                        .HasColumnType("integer");

                    b.Property<int?>("DeleteState")
                        .HasColumnType("integer");

                    b.Property<int?>("NavigateState")
                        .HasColumnType("integer");

                    b.Property<int?>("ReadState")
                        .HasColumnType("integer");

                    b.Property<Guid?>("RoleID")
                        .HasColumnType("uuid");

                    b.Property<string>("TargetTypeFullName")
                        .HasColumnType("text");

                    b.Property<int?>("WriteState")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("RoleID");

                    b.ToTable("PermissionPolicyTypePermissionObject");
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.PermissionPolicy.PermissionPolicyUser", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("ChangePasswordOnFirstLogon")
                        .HasColumnType("boolean");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("StoredPassword")
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("PermissionPolicyUser");

                    b.HasDiscriminator<string>("Discriminator").HasValue("PermissionPolicyUser");
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.ReportDataV2", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte[]>("Content")
                        .HasColumnType("bytea");

                    b.Property<string>("DataTypeName")
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.Property<bool>("IsInplaceReport")
                        .HasColumnType("boolean");

                    b.Property<string>("ParametersObjectTypeName")
                        .HasColumnType("text");

                    b.Property<string>("PredefinedReportTypeName")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("ReportDataV2");
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.StateMachine.StateMachine", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<bool>("ExpandActionsInDetailView")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("StatePropertyNameBase")
                        .HasColumnType("text");

                    b.Property<string>("TargetObjectTypeName")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("StateMachines");
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.StateMachine.StateMachineAppearance", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AppearanceItemType")
                        .HasColumnType("text");

                    b.Property<int>("BackColorInt")
                        .HasColumnType("integer");

                    b.Property<string>("Context")
                        .HasColumnType("text");

                    b.Property<string>("Criteria")
                        .HasColumnType("text");

                    b.Property<bool?>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<int>("FontColorInt")
                        .HasColumnType("integer");

                    b.Property<int?>("FontStyle")
                        .HasColumnType("integer");

                    b.Property<string>("Method")
                        .HasColumnType("text");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<Guid?>("StateID")
                        .HasColumnType("uuid");

                    b.Property<string>("TargetItems")
                        .HasColumnType("text");

                    b.Property<int?>("Visibility")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("StateID");

                    b.ToTable("StateMachineAppearance");
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.StateMachine.StateMachineState", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Caption")
                        .HasColumnType("text");

                    b.Property<string>("MarkerValue")
                        .HasColumnType("text");

                    b.Property<Guid?>("StateMachineID")
                        .HasColumnType("uuid");

                    b.Property<string>("TargetObjectCriteria")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("StateMachineID");

                    b.ToTable("StateMachineStates");
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.StateMachine.StateMachineTransition", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Caption")
                        .HasColumnType("text");

                    b.Property<int>("Index")
                        .HasColumnType("integer");

                    b.Property<bool>("SaveAndCloseView")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("SourceStateID")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TargetStateID")
                        .HasColumnType("uuid");

                    b.HasKey("ID");

                    b.HasIndex("SourceStateID");

                    b.HasIndex("TargetStateID");

                    b.ToTable("StateMachineTransitions");
                });

            modelBuilder.Entity("DXApplication3.Module.BusinessObjects.ApplicationUserLoginInfo", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProviderName")
                        .HasColumnType("text");

                    b.Property<string>("ProviderUserKey")
                        .HasColumnType("text");

                    b.Property<Guid>("UserForeignKey")
                        .HasColumnType("uuid");

                    b.HasKey("ID");

                    b.HasIndex("UserForeignKey");

                    b.HasIndex("LoginProviderName", "ProviderUserKey")
                        .IsUnique();

                    b.ToTable("PermissionPolicyUserLoginInfo");
                });

            modelBuilder.Entity("DXApplication3.Module.BusinessObjects.BaiViet", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("NgayTao")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("NguoiTaoID")
                        .HasColumnType("uuid");

                    b.Property<string>("NoiDung")
                        .HasColumnType("text");

                    b.Property<string>("TieuDe")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("TrangThai")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("NguoiTaoID");

                    b.ToTable("BaiViets");
                });

            modelBuilder.Entity("DXApplication3.Module.BusinessObjects.Employee", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("TaskID")
                        .HasColumnType("uuid");

                    b.HasKey("ID");

                    b.HasIndex("TaskID");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("DXApplication3.Module.BusinessObjects.HistoryLog", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Action")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid>("ObjectId")
                        .HasColumnType("uuid");

                    b.Property<string>("ObjectType")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("ID");

                    b.ToTable("HistoryLogs");
                });

            modelBuilder.Entity("DXApplication3.Module.BusinessObjects.Task", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Subject")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("ID");

                    b.ToTable("Task");
                });

            modelBuilder.Entity("PermissionPolicyRolePermissionPolicyUser", b =>
                {
                    b.Property<Guid>("RolesID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UsersID")
                        .HasColumnType("uuid");

                    b.HasKey("RolesID", "UsersID");

                    b.HasIndex("UsersID");

                    b.ToTable("PermissionPolicyRolePermissionPolicyUser");
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.PermissionPolicy.PermissionPolicyRole", b =>
                {
                    b.HasBaseType("DevExpress.Persistent.BaseImpl.EF.PermissionPolicy.PermissionPolicyRoleBase");

                    b.HasDiscriminator().HasValue("PermissionPolicyRole");
                });

            modelBuilder.Entity("DXApplication3.Module.BusinessObjects.ApplicationUser", b =>
                {
                    b.HasBaseType("DevExpress.Persistent.BaseImpl.EF.PermissionPolicy.PermissionPolicyUser");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.ModelDifferenceAspect", b =>
                {
                    b.HasOne("DevExpress.Persistent.BaseImpl.EF.ModelDifference", "Owner")
                        .WithMany("Aspects")
                        .HasForeignKey("OwnerID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.PermissionPolicy.PermissionPolicyActionPermissionObject", b =>
                {
                    b.HasOne("DevExpress.Persistent.BaseImpl.EF.PermissionPolicy.PermissionPolicyRoleBase", "Role")
                        .WithMany("ActionPermissions")
                        .HasForeignKey("RoleID");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.PermissionPolicy.PermissionPolicyMemberPermissionsObject", b =>
                {
                    b.HasOne("DevExpress.Persistent.BaseImpl.EF.PermissionPolicy.PermissionPolicyTypePermissionObject", "TypePermissionObject")
                        .WithMany("MemberPermissions")
                        .HasForeignKey("TypePermissionObjectID");

                    b.Navigation("TypePermissionObject");
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.PermissionPolicy.PermissionPolicyNavigationPermissionObject", b =>
                {
                    b.HasOne("DevExpress.Persistent.BaseImpl.EF.PermissionPolicy.PermissionPolicyRoleBase", "Role")
                        .WithMany("NavigationPermissions")
                        .HasForeignKey("RoleID");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.PermissionPolicy.PermissionPolicyObjectPermissionsObject", b =>
                {
                    b.HasOne("DevExpress.Persistent.BaseImpl.EF.PermissionPolicy.PermissionPolicyTypePermissionObject", "TypePermissionObject")
                        .WithMany("ObjectPermissions")
                        .HasForeignKey("TypePermissionObjectID");

                    b.Navigation("TypePermissionObject");
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.PermissionPolicy.PermissionPolicyTypePermissionObject", b =>
                {
                    b.HasOne("DevExpress.Persistent.BaseImpl.EF.PermissionPolicy.PermissionPolicyRoleBase", "Role")
                        .WithMany("TypePermissions")
                        .HasForeignKey("RoleID");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.StateMachine.StateMachineAppearance", b =>
                {
                    b.HasOne("DevExpress.Persistent.BaseImpl.EF.StateMachine.StateMachineState", "State")
                        .WithMany("Appearances")
                        .HasForeignKey("StateID");

                    b.Navigation("State");
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.StateMachine.StateMachineState", b =>
                {
                    b.HasOne("DevExpress.Persistent.BaseImpl.EF.StateMachine.StateMachine", "StateMachine")
                        .WithMany("States")
                        .HasForeignKey("StateMachineID");

                    b.Navigation("StateMachine");
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.StateMachine.StateMachineTransition", b =>
                {
                    b.HasOne("DevExpress.Persistent.BaseImpl.EF.StateMachine.StateMachineState", "SourceState")
                        .WithMany("Transitions")
                        .HasForeignKey("SourceStateID");

                    b.HasOne("DevExpress.Persistent.BaseImpl.EF.StateMachine.StateMachineState", "TargetState")
                        .WithMany()
                        .HasForeignKey("TargetStateID");

                    b.Navigation("SourceState");

                    b.Navigation("TargetState");
                });

            modelBuilder.Entity("DXApplication3.Module.BusinessObjects.ApplicationUserLoginInfo", b =>
                {
                    b.HasOne("DXApplication3.Module.BusinessObjects.ApplicationUser", "User")
                        .WithMany("UserLogins")
                        .HasForeignKey("UserForeignKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DXApplication3.Module.BusinessObjects.BaiViet", b =>
                {
                    b.HasOne("DXApplication3.Module.BusinessObjects.ApplicationUser", "NguoiTao")
                        .WithMany("BaiViets")
                        .HasForeignKey("NguoiTaoID");

                    b.Navigation("NguoiTao");
                });

            modelBuilder.Entity("DXApplication3.Module.BusinessObjects.Employee", b =>
                {
                    b.HasOne("DXApplication3.Module.BusinessObjects.Task", null)
                        .WithMany("Employees")
                        .HasForeignKey("TaskID");
                });

            modelBuilder.Entity("PermissionPolicyRolePermissionPolicyUser", b =>
                {
                    b.HasOne("DevExpress.Persistent.BaseImpl.EF.PermissionPolicy.PermissionPolicyRole", null)
                        .WithMany()
                        .HasForeignKey("RolesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DevExpress.Persistent.BaseImpl.EF.PermissionPolicy.PermissionPolicyUser", null)
                        .WithMany()
                        .HasForeignKey("UsersID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.ModelDifference", b =>
                {
                    b.Navigation("Aspects");
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.PermissionPolicy.PermissionPolicyRoleBase", b =>
                {
                    b.Navigation("ActionPermissions");

                    b.Navigation("NavigationPermissions");

                    b.Navigation("TypePermissions");
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.PermissionPolicy.PermissionPolicyTypePermissionObject", b =>
                {
                    b.Navigation("MemberPermissions");

                    b.Navigation("ObjectPermissions");
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.StateMachine.StateMachine", b =>
                {
                    b.Navigation("States");
                });

            modelBuilder.Entity("DevExpress.Persistent.BaseImpl.EF.StateMachine.StateMachineState", b =>
                {
                    b.Navigation("Appearances");

                    b.Navigation("Transitions");
                });

            modelBuilder.Entity("DXApplication3.Module.BusinessObjects.Task", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("DXApplication3.Module.BusinessObjects.ApplicationUser", b =>
                {
                    b.Navigation("BaiViets");

                    b.Navigation("UserLogins");
                });
#pragma warning restore 612, 618
        }
    }
}
